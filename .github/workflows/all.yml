name: All Build  
on:  
  push:  
    branches: [ main ]  
    # tags: ['*']  
  pull_request:  
    # branches: [ master ]  
  workflow_dispatch:  #手动触发  
  
permissions:  
  contents: write  
  
concurrency:  
  group: ${{ github.ref }}  
  cancel-in-progress: false  
  
jobs:  
  build:  
    runs-on: ${{ matrix.os }}  
    strategy:  
      matrix:  
        # os: [ubuntu-latest, windows-latest, macos-latest, macos-13]  
        os: [windows-latest]  
  
    steps:  
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: 查看Windows系统架构  
        if: matrix.os == 'windows-latest'  
        run: |  
          vswhere -latest -products * -requires Microsoft.Component.MSBuild -property installationPath  
          echo "Visual Studio installation path: ${{ steps.vscheck.outputs.installationPath }}"  
          cmake --version  
  
      - name: windows安装zip  
        if: matrix.os == 'windows-latest'  
        run: |  
          # choco install zip -y  
          cmake --version  
  
      - name: 查看系统架构  
        id: arch  
        run: |  
          if [[ "$RUNNER_OS" == "Windows" ]]; then  
            echo "arch=amd64" >> $GITHUB_ENV  
          elif [[ "$RUNNER_OS" == "Linux" ]]; then  
            echo "arch=$(uname -m)" >> $GITHUB_ENV  
          elif [[ "$RUNNER_OS" == "macOS" ]]; then  
            echo "arch=$(uname -m)" >> $GITHUB_ENV  
          fi  
        shell: bash  
  
      - name: Clone aliyun-oss-cpp-sdk  
        run: |  
          git clone https://github.com/aliyun/aliyun-oss-cpp-sdk.git  


      - name: windows cmake  
        if: matrix.os == 'windows-latest'  
        run: |  
          cd aliyun-oss-cpp-sdk  
          mkdir build  
          cd build  
          cmake ..  
      - name: windows build 
        if: matrix.os == 'windows-latest'  
        run: |  
          $vsInstallPath = vswhere -latest -products * -requires Microsoft.Component.MSBuild -property installationPath  
          $msbuildPath = Join-Path $vsInstallPath "MSBuild\Current\Bin\MSBuild.exe"  
          cd aliyun-oss-cpp-sdk/build  
          & $msbuildPath ALL_BUILD.vcxproj  
          & $msbuildPath INSTALL.vcxproj  
      - name: ls aliyun-oss-cpp-sdk/build
        run: |  
          cd aliyun-oss-cpp-sdk/build  
          ls 
      - name: windows 压缩ZIP  
        if: matrix.os == 'windows-latest'  
        run: |  
          $output_name = "GitLFS_Local_Files-${{ runner.os }}-${{ env.arch }}"  
          echo "Output name: $output_name"  
          cd aliyun-oss-cpp-sdk/build  
          Compress-Archive -Path * -DestinationPath "$output_name.zip"  
        shell: pwsh  


        
      - name: ls aliyun-oss-cpp-sdk/build
        run: |  
          cd aliyun-oss-cpp-sdk/build  
          ls  
  
      - name: Get latest tag  
        id: get_latest_tag  
        run: |  
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)  
          echo "::set-output name=tag::$latest_tag"  
        shell: bash  
      - name: Create new tag  
        id: create_new_tag  
        run: |  
          latest_tag=${{ steps.get_latest_tag.outputs.tag }}  
          if [ -z "$latest_tag" ]; then  
            new_tag="v1.0.0"  
          else  
            IFS='.' read -r -a parts <<< "${latest_tag#v}"  
            major=${parts[0]}  
            minor=${parts[1]}  
            patch=${parts[2]}  
            new_patch=$((patch + 1))  
            new_tag="v${major}.${minor}.${new_patch}"  
          fi  
          echo "::set-output name=new_tag::$new_tag"  
          echo "new_tag=$new_tag" >> $GITHUB_ENV  
        shell: bash  
      - name: Create GitHub Release  
        id: create_release  
        uses: softprops/action-gh-release@v1  
        with:  
          tag_name: ${{ steps.create_new_tag.outputs.new_tag }}  
          files: |  
            aliyun-oss-cpp-sdk/build/GitLFS_Local_Files-${{ runner.os }}-${{ env.arch }}.zip  
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
